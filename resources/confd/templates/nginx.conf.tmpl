events {
  worker_connections {{ getenv "WORKER_CONNECTIONS" }};
}

http {
  lua_shared_dict discovery 1m;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;
  {{ if eq (getenv "RESOLVER") "host" }}
  resolver {{ getenv "NAMESERVER" }} ipv6=off;
  {{ else }}
  resolver {{ getenv "RESOLVER" }} ipv6=off;
  {{ end }}
  lua_code_cache off;

  server {
    listen {{ getenv "PORT" }};

    location / {
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      chunked_transfer_encoding off;
      proxy_buffering off;
      proxy_cache off;

      access_by_lua '

          local opts = {
             redirect_uri_path = "/{{ getenv "OIC_REDIRECT_URI_PATH" }}",
             discovery = "{{ getenv "OIC_DISCOVERY" }}",
             client_id = "{{ getenv "OIC_CLIENT_ID" }}",
             client_secret = "{{ getenv "OIC_CLIENT_SECRET" }}",
             authorization_params = { {{ getenv "OIC_AUTHORIZATION_PARAMS" }} },
             scope = "{{ getenv "OIC_SCOPE" }}",
             redirect_uri_scheme = "{{ getenv "OIC_REDIRECT_URI_SCHEME" }}",
             logout_path = "/{{ getenv "OIC_LOGOUT_PATH" }}",
             redirect_after_logout_uri = "{{ getenv "OIC_REDIRECT_AFTER_LOGOUT_URI" }}"
          }

          local session_opts = {
             storage = "{{ getenv "SESSION_STORAGE"}}",
             {{ if eq (getenv "SESSION_STORAGE") "redis" }}redis = {
               prefix = "{{ getenv "SESSION_REDIS_PREFIX" }}",
               host = "{{ getenv "SESSION_REDIS_HOST" }}",
               port = "{{ getenv "SESSION_REDIS_PORT" }}",
             },{{ end }}
             secret = "{{getenv "SESSION_SECRET"}}"
          }

          local res, err = require("resty.openidc").authenticate(opts, nil, nil, session_opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if res.id_token.hd ~= "{{ getenv "OIC_DOMAIN" }}" then
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          if res.id_token.sub then
            ngx.req.set_header("{{ getenv "OIC_USER_HEADER" }}", res.id_token.sub)
          else
            ngx.req.clear_header("{{ getenv "OIC_USER_HEADER" }}")
          end
      ';
      proxy_pass {{ getenv "PROXY_PASS" }};
    }
  }
}
